#include <stdio.h>
// main.cpp

// 전역변수
int g_i = 0; // 메모리 영역에서 Data 영역을 사용한다.

// 변수의 종류
// 1. 지역변수
// 2. 전역변수
// 3. 정적변수(static)
// 4. 외부변수(extern)

// 전역 변수, 정적 변수, 외부 변수 모두 데이터 영역을 사용함

// 메모리 영역
// 1. 스택 영역
// 2. 데이터 영역
// 3. 일기 전용(코드, ROM)
// 4. 힙 영역


// 데이터 영역 특징
// 프로그램 시작 시 생성
// 프로그램 종료 시 해제
// 프로그램이 실행되는 내내 존재한다. 스택 메모리가 어떻든



#include "Func.h"
#include "common.h"



// 정적변수
// 정적변수도 전역변수 처럼 데이터 영역을 쓴다.
static int g_iStatic = 0;
// static은 선언된 위치가 중요
// c++에서 정적이다라는 의미는 내가 생성된 위치에서 움직이지 않는 것
// 정적변수가 현재에는 함수 밖 main.cpp과 Func.cpp에 선언된 것
// main.cpp에서 g_iStatic라고 하는 것은 main.cpp에 선언된 것 
// Func.cpp에서 g_iStatic라고 하는 것은 Func.cpp에 선언된 것 
// 그래서 중복 정의의 문제가 되지 않는다.

// 위의 전역변수 int g_i = 0; 가 Func.cpp에도 있을 경우 링크단계에서 전역 변수가 중복되는 문제가 생긴다.
// 만약 정적변수 static int g_iStatic = 0;가 Func.cpp가 있을때는 문제가 없다.


void Test()
{
	static int i = 0;
	// Test함수에 고정된 변수 i
	// Static이므로 데이터 메모리를 사용한다.
	// F12 : 선언 위치로 이동

	int a = 0;
	// Test함수가 호출되는 순간 Test의 호출 스택 안에 존재한다.
	// 하지만 static int i는 데이터 영역에 존재한다.
	// 그러나 Test안에서만 지칭할 수 있다 그런데 메모리영역은 데이터 영역을 사용한다.
	// main에서는 사용할 수 없다.
	// 정적변수를 사용하면 정적변수를 수정하지 않으면 변수를 바꿀수 없다.
	// 제한 하는 것이 기능이다.
	// static 변수 초기화 구문은 최초 한번만 들어간다.

}

int main()
{



	return 0;

}


#include "Func.h"
#include "common.h"
// 명시한 해당 파일을 복붙하는 것과 똑같은것

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Func.cpp
static int g_iStatic = 0;
int Add(int a, int b)
{
	return a + b;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// common.h

// 정적변수
static int g_iStatic = 0;
// 이름만 같을 뿐 다른 값으 가지는 값, 오류는 안나지만 모든 파일을 통합하는 변수로 보기는 어렵다
extern int g_iExtern;
// 변수를 선언한 것이 아니라 g_iExtern이라는 변수가 있다는 것을 알려준것, 각 파일은 이러한 변수가 있다는 걸 알았다.
// 어떤 파일이든 있어도 상관이 없다. 있기만 하면 된다.
